class Rand {
  _rand: Function
  constructor () {
    if (typeof self === 'object') {
      /* eslint-disable-next-line */
      if ((self.crypto && self.crypto.getRandomValues) || (self.msCrypto && self.msCrypto.getRandomValues)) {
        this._rand = n => {
          const arr = new Uint8Array(n);
          /* eslint-disable-next-line */
          (self.crypto || self.msCrypto).getRandomValues(arr)
          return arr
        }
      } else if (typeof window === 'object') {
        this._rand = () => {
          throw new Error('Not implemented yet')
        }
      }
    } else {
      try {
        /* eslint-disable-next-line */
        const crypto = require('crypto')
        if (typeof crypto.randomBytes === 'function') {
          this._rand = n => crypto.randomBytes(n)
        }
      } catch (e) {
      }
    }
  }

  generate (len: number): number[] {
    return this._rand(len)
  }
}

let ayn = null

/**
 * Generates a sequence of pseudo-random bytes with the given length.
 *
 * @param len - The number of bytes to generate
 *
 * @returns The generated bytes
 *
 * @example
 * import Random from '@bsv/sdk/primitives/Random'
 * const bytes = Random(32) // Produces 32 random bytes
 */
export default (len: number): number[] => {
  if (ayn == null) {
    ayn = new Rand()
  }
  return ayn.generate(len)
}
