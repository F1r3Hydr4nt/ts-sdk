# Low-Level: Using AES for the Symmetric Encryption of Data

The goal of this tutorial is to explore symmetric encryption of data using public and private keys with the Advanced Encryption Standard (AES). We will make use of the functions provided by this library in order to encrypt data with user held keys. 

<img src="./images/symmetric_encryption_diagram.png" width="600" alt=""/>

If you would like to learn more about AES encryption, here are some general resources that may help:

- [AES - Wiki](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)
- [GCM - Wiki](https://en.wikipedia.org/wiki/Galois/Counter_Mode)


Let's get started!

## Getting Started

First, you will want to make sure you have installed the required dependencies.

```ts
import { SymmetricKey, Utils } from '@bsv/sdk'
```

Next, we wil define the keys to be used and the data to encrypt. They encrypt function expects a parameter of type `number[]` so we will use the Utils `toArray` function to convert the UTF8 message to the correct type.

```ts
  const symmetricKey = SymmetricKey.fromRandom()
  const messageToEncrypt: number[] = Utils.toArray('Hello Alice, this is Bob!', 'utf8')
```

### Encrypting and Decrypting

When you encrypt a message, an initialization vector is prepended to the message to prevent potential key-reuse attacks. Conversely, when decrypting, the initialization vector that was initially added is spliced out and used in the AES-GSM decryption processes.

We will use the `encrypt` and `decrypt` functions of the SymmetricKey class to transform the message.

To parse out the text as a UTF8 string from a number array, we will use the Utils `toUTF8` function.
```ts
  const encryptedMessage = SymmetricKey.encrypt(messageToEncrypt)
  const plaintext = SymmetricKey.decrypt(encryptedMessage) as number[]
  const plaintextMessage = Utils.toUTF8(plaintext)
  // console.log(plaintextMessage) --> 'Hello Alice, this is Bob!'
```

This is just a basic demonstration of symmetric encryption/decryption using the @bsv/sdk library, however the possibilities of what you can do are endless once you understand these fundamentals.